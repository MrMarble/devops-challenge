# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches-ignore: # Currently I have disabled my cluster so this is to prevent this CI from running
      - "*"
    #branches:
    # - main
    # - development
    # - staging

env:
  GKE_CLUSTER: cluster-1 # Set to cluster name (Google Console)
  GKE_ZONE: us-central1-c # Set to cluster zone (Google Console)
  IMAGE: air-quality # Name for the resulted docker image

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # In order to maintain a single workflow configuration I though of using some conditional values
      # to determine when to deploy to production, development or staging.
      # For it to work, you have to set up some github secretes appending at the end the branch name. e.g:
      #   GKE_SA_KEY_MAIN         => This secret will hold the service account key for the production deployment
      #   GKE_PROJECT_DEVELOPMENT => This secret will hold the name of the google cloud project id for development
      - name: Define environment
        run: |-
          branch=${GITHUB_REF##*/}
          echo "::set-env name=gke_project::GKE_PROJECT_${branch^^}" 
          echo "::set-env name=gke_sa_key::GKE_SA_KEY_${branch^^}"
      # This will give us access to ${{secrets[env.gke_project]}}

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        with:
          service_account_key: ${{secrets[env.gke_sa_key] }} # Dynamic github secret based on branch name
          project_id: ${{ secrets[env.gke_project] }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/${{ secrets[env.gke_project] }}/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/${{ secrets[env.gke_project] }}/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          cd deployment
          .././kustomize edit set image mrmarble/cartodb=gcr.io/${{ secrets[env.gke_project] }}/$IMAGE:$GITHUB_SHA
          .././kustomize build . | kubectl apply -f -
          kubectl get services -o wide
